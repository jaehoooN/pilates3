// wait-until-midnight.js (ÏÉà ÌååÏùºÎ™Ö)
const waitUntilMidnight = async () => {  // ‚ö†Ô∏è Ìï®ÏàòÎ™ÖÎèÑ Î≥ÄÍ≤Ω
  console.log('‚è∞ ÏûêÏ†ï ÎåÄÍ∏∞ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏãúÏûë');
  
  const getKSTTime = () => {
    const now = new Date();
    const kstOffset = 9 * 60;
    const utcTime = now.getTime() + (now.getTimezoneOffset() * 60000);
    return new Date(utcTime + (kstOffset * 60000));
  };
  
  const kstNow = getKSTTime();
  console.log(`ÌòÑÏû¨ ÌïúÍµ≠ ÏãúÍ∞Ñ: ${kstNow.toLocaleString('ko-KR')}`);
  
  const target = new Date(kstNow);
  
  // ÏûêÏ†ï ÏÑ§Ï†ï
  if (kstNow.getHours() === 23 && kstNow.getMinutes() >= 50) {
    target.setDate(target.getDate() + 1);
    target.setHours(0, 0, 0, 0);
  } else if (kstNow.getHours() === 0 && kstNow.getMinutes() === 0) {
    console.log('‚úÖ Ïù¥ÎØ∏ ÏûêÏ†ïÏûÖÎãàÎã§.');
    return;
  } else {
    target.setDate(target.getDate() + 1);
    target.setHours(0, 0, 0, 0);
  }
  
  const waitMs = target - kstNow;
  const waitMinutes = Math.floor(waitMs / 60000);
  const waitSeconds = Math.floor((waitMs % 60000) / 1000);
  
  console.log(`‚è≥ ÎåÄÍ∏∞ ÏãúÍ∞Ñ: ${waitMinutes}Î∂Ñ ${waitSeconds}Ï¥à`);
  console.log(`‚è∞ ÏòàÏïΩ ÏãúÏûë ÏòàÏ†ï: ${target.toLocaleString('ko-KR')}`);
  
  await new Promise(resolve => {
    const interval = setInterval(() => {
      const now = getKSTTime();
      const remaining = target - now;
      
      if (remaining <= 0) {
        clearInterval(interval);
        console.log('‚úÖ ÏûêÏ†ï 00Î∂Ñ 00Ï¥à ÎèÑÎã¨!');
        resolve();
      } else if (remaining < 10000) {
        const seconds = Math.ceil(remaining / 1000);
        console.log(`üî• ${seconds}...`);
      }
    }, 100);
  });
};

module.exports = { waitUntilMidnight };  // ‚ö†Ô∏è export Ïù¥Î¶ÑÎèÑ Î≥ÄÍ≤Ω

if (require.main === module) {
  waitUntilMidnight().then(() => {  // ‚ö†Ô∏è Ìò∏Ï∂ú Ìï®ÏàòÎ™ÖÎèÑ Î≥ÄÍ≤Ω
    console.log('‚úÖ ÎåÄÍ∏∞ ÏôÑÎ£å');
  }).catch(error => {
    console.error('‚ùå Ïò§Î•ò:', error);
  });
}
